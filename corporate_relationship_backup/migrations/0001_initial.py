# Generated by Django 4.2.7 on 2025-07-08 12:34

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import djmoney.models.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('corporate', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(help_text='Nome da empresa cliente', max_length=120)),
                ('address', models.TextField(help_text='Endereço completo do cliente')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Data de criação do registro')),
            ],
            options={
                'verbose_name': 'Client',
                'verbose_name_plural': 'Clients',
                'ordering': ['company_name'],
            },
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nome completo do contato', max_length=120)),
                ('role', models.CharField(help_text='Função/cargo (ex.: Diretor Financeiro)', max_length=80)),
                ('phone', models.CharField(blank=True, help_text='Número de telefone', max_length=40)),
                ('email', models.EmailField(help_text='Email para contato', max_length=254)),
                ('client', models.ForeignKey(help_text='Cliente ao qual este contato pertence', on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to='corporate_relationship.client')),
            ],
            options={
                'verbose_name': 'Contact',
                'verbose_name_plural': 'Contacts',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='RelationshipStructure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('ARCHIVED', 'Archived')], default='ACTIVE', help_text='Status do relacionamento', max_length=15)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Data de criação do relacionamento')),
                ('client', models.ForeignKey(help_text='Cliente proprietário da estrutura', on_delete=django.db.models.deletion.CASCADE, to='corporate_relationship.client')),
                ('structure', models.ForeignKey(help_text='Estrutura legal relacionada', on_delete=django.db.models.deletion.CASCADE, to='corporate.structure')),
            ],
            options={
                'verbose_name': 'Relationship Structure',
                'verbose_name_plural': 'Relationship Structures',
                'ordering': ['-created_at'],
                'unique_together': {('structure', 'client')},
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nome do serviço', max_length=120)),
                ('description', models.TextField(blank=True, help_text='Descrição detalhada do serviço')),
                ('service_price_currency', djmoney.models.fields.CurrencyField(choices=[('BRL', 'Brazilian Real'), ('EUR', 'Euro'), ('USD', 'US Dollar')], default='USD', editable=False, max_length=3)),
                ('service_price', djmoney.models.fields.MoneyField(decimal_places=2, help_text='Preço do serviço', max_digits=12)),
                ('regulator_fee_currency', djmoney.models.fields.CurrencyField(choices=[('BRL', 'Brazilian Real'), ('EUR', 'Euro'), ('USD', 'US Dollar')], default='USD', editable=False, max_length=3)),
                ('regulator_fee', djmoney.models.fields.MoneyField(decimal_places=2, help_text='Taxa regulatória/governamental', max_digits=12)),
                ('counterparty_name', models.CharField(help_text='Nome do órgão/entidade receptora', max_length=120)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('executor', models.ForeignKey(help_text='Usuário responsável pela execução', on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('informed', models.ManyToManyField(blank=True, help_text='Contatos do cliente a serem notificados', to='corporate_relationship.contact')),
                ('relationship_structure', models.ForeignKey(blank=True, help_text='Estrutura relacionada (opcional)', null=True, on_delete=django.db.models.deletion.CASCADE, to='corporate_relationship.relationshipstructure')),
            ],
            options={
                'verbose_name': 'Service',
                'verbose_name_plural': 'Services',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='WebhookLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(help_text='Tipo do evento (ex: personalized_product_approved)', max_length=50)),
                ('payload', models.JSONField(help_text='Payload enviado no webhook')),
                ('url', models.URLField(help_text='URL de destino do webhook')),
                ('status', models.CharField(choices=[('SUCCESS', 'Success'), ('FAILED', 'Failed'), ('PENDING', 'Pending')], default='PENDING', help_text='Status da tentativa', max_length=10)),
                ('response_status_code', models.PositiveIntegerField(blank=True, help_text='Código de status HTTP da resposta', null=True)),
                ('response_body', models.TextField(blank=True, help_text='Corpo da resposta HTTP')),
                ('error_message', models.TextField(blank=True, help_text='Mensagem de erro se houver falha')),
                ('attempt_count', models.PositiveIntegerField(default=1, help_text='Número de tentativas realizadas')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Data da primeira tentativa')),
                ('last_attempt_at', models.DateTimeField(auto_now=True, help_text='Data da última tentativa')),
            ],
            options={
                'verbose_name': 'Webhook Log',
                'verbose_name_plural': 'Webhook Logs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ServiceActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveSmallIntegerField(help_text='Ordem de execução da atividade')),
                ('name', models.CharField(help_text='Nome da atividade', max_length=120)),
                ('status', models.CharField(choices=[('TODO', 'To do'), ('DONE', 'Done')], default='TODO', help_text='Status da atividade', max_length=12)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('service', models.ForeignKey(help_text='Serviço ao qual esta atividade pertence', on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='corporate_relationship.service')),
            ],
            options={
                'verbose_name': 'Service Activity',
                'verbose_name_plural': 'Service Activities',
                'ordering': ['order'],
                'unique_together': {('service', 'order')},
            },
        ),
    ]
