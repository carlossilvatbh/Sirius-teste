# Generated by Django 4.2.7 on 2025-07-09 12:50

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('parties', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('corporate', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Partner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(max_length=120)),
                ('address', models.TextField()),
                ('partnership_start_date', models.DateField(auto_now_add=True)),
                ('partnership_status', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive')], default='ACTIVE', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('party', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='parties.party')),
            ],
            options={
                'verbose_name': 'Partner',
                'verbose_name_plural': 'Partners',
                'ordering': ['company_name'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(help_text='Nome do produto', max_length=100)),
                ('complexidade_template', models.CharField(choices=[('BASIC', 'Basic Configuration'), ('INTERMEDIATE', 'Intermediate Configuration'), ('ADVANCED', 'Advanced Configuration'), ('EXPERT', 'Expert Configuration')], default='BASIC', help_text='Nível de complexidade', max_length=20)),
                ('descricao', models.TextField(help_text='Descrição detalhada do produto')),
                ('commercial_name', models.CharField(help_text='Nome comercial do produto (texto livre)', max_length=200)),
                ('master_agreement_url', models.URLField(help_text='URL para documento de Master Agreement')),
                ('custo_automatico', models.BooleanField(default=True, help_text='Se True, custo é calculado automaticamente das estruturas')),
                ('custo_manual', models.DecimalField(blank=True, decimal_places=2, help_text='Custo manual (usado quando custo_automatico=False)', max_digits=12, null=True)),
                ('tempo_total_implementacao', models.IntegerField(help_text='Tempo total de implementação em dias')),
                ('uso_count', models.IntegerField(default=0, help_text='Número de vezes que este produto foi usado')),
                ('publico_alvo', models.TextField(blank=True, help_text='Público-alvo do produto')),
                ('casos_uso', models.TextField(blank=True, help_text='Casos de uso comuns')),
                ('ativo', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Product (Legacy)',
                'verbose_name_plural': 'Products (Legacy)',
                'ordering': ['-uso_count', 'commercial_name'],
            },
        ),
        migrations.CreateModel(
            name='ProductHierarchy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(help_text='Order of this structure in the product hierarchy')),
                ('custom_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Custom cost for this structure in this product', max_digits=12, null=True)),
                ('notes', models.TextField(blank=True, help_text='Specific notes for this structure in this product')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(help_text='Product that contains this structure', on_delete=django.db.models.deletion.CASCADE, to='sales.product')),
                ('structure', models.ForeignKey(help_text='Legal entity included in the product', on_delete=django.db.models.deletion.CASCADE, to='corporate.entity')),
            ],
            options={
                'verbose_name': 'Product Hierarchy (Legacy)',
                'verbose_name_plural': 'Product Hierarchies (Legacy)',
                'ordering': ['product', 'order'],
            },
        ),
        migrations.AddField(
            model_name='product',
            name='legal_structures',
            field=models.ManyToManyField(help_text='Legal entities included in this product', through='sales.ProductHierarchy', to='corporate.entity'),
        ),
        migrations.CreateModel(
            name='PersonalizedProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(help_text='Nome do produto personalizado', max_length=200)),
                ('descricao', models.TextField(blank=True, help_text='Descrição detalhada do produto personalizado')),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('ARCHIVED', 'Archived'), ('APPROVED', 'Approved')], default='DRAFT', help_text='Status atual do produto personalizado', max_length=20)),
                ('version_number', models.PositiveIntegerField(default=1, help_text='Número da versão (incrementado automaticamente)')),
                ('configuracao_personalizada', models.JSONField(blank=True, default=dict, help_text='Configurações específicas deste produto personalizado')),
                ('custom_configuration', models.JSONField(blank=True, help_text='Custom configuration for this personalized product', null=True)),
                ('custo_personalizado', models.DecimalField(blank=True, decimal_places=2, help_text='Custo personalizado (sobrescreve cálculo automático)', max_digits=12, null=True)),
                ('observacoes', models.TextField(blank=True, help_text='Observações e notas específicas')),
                ('ativo', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('base_product', models.ForeignKey(blank=True, help_text='Product base para este produto personalizado', null=True, on_delete=django.db.models.deletion.CASCADE, to='sales.product')),
                ('base_structure', models.ForeignKey(blank=True, help_text='Legal Entity base para este produto personalizado', null=True, on_delete=django.db.models.deletion.CASCADE, to='corporate.entity')),
                ('parent_version', models.ForeignKey(blank=True, help_text='Versão anterior deste produto personalizado', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='child_versions', to='sales.personalizedproduct')),
            ],
            options={
                'verbose_name': 'Personalized Product',
                'verbose_name_plural': 'Personalized Products',
                'ordering': ['-version_number', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120)),
                ('role', models.CharField(max_length=80)),
                ('phone', models.CharField(blank=True, max_length=40)),
                ('email', models.EmailField(max_length=254)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('partner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to='sales.partner')),
            ],
            options={
                'verbose_name': 'Contact',
                'verbose_name_plural': 'Contacts',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='StructureRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(help_text='Detailed description of requested structure')),
                ('status', models.CharField(choices=[('SUBMITTED', 'Submitted'), ('IN_REVIEW', 'In Review'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('REJECTED', 'Rejected')], default='SUBMITTED', max_length=20)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('point_of_contact_contact', models.ForeignKey(blank=True, help_text='Specific contact within partner', null=True, on_delete=django.db.models.deletion.SET_NULL, to='sales.contact')),
                ('point_of_contact_partner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='poc_requests', to='sales.partner')),
                ('point_of_contact_party', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='poc_requests', to='parties.party')),
                ('requesting_parties', models.ManyToManyField(help_text='Parties requesting the structure', to='parties.party')),
            ],
            options={
                'verbose_name': 'Structure Request',
                'verbose_name_plural': 'Structure Requests',
                'ordering': ['-submitted_at'],
                'indexes': [models.Index(fields=['status'], name='sales_struc_status_3499e3_idx'), models.Index(fields=['submitted_at'], name='sales_struc_submitt_aa5110_idx')],
            },
        ),
        migrations.CreateModel(
            name='StructureApproval',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('APPROVED', 'Approved'), ('APPROVED_WITH_PRICE_CHANGE', 'Approved with Price Change'), ('NEED_CORRECTION', 'Need Correction'), ('REJECTED', 'Rejected')], max_length=30)),
                ('final_price', models.DecimalField(blank=True, decimal_places=2, help_text='Final price (for APPROVED_WITH_PRICE_CHANGE)', max_digits=15, null=True)),
                ('correction_comment', models.TextField(blank=True, help_text='Comment for corrections needed (for NEED_CORRECTION)')),
                ('rejection_reason', models.TextField(blank=True, help_text='Reason for rejection (for REJECTED)')),
                ('action_date', models.DateTimeField(auto_now_add=True)),
                ('approver', models.ForeignKey(blank=True, help_text='Who approved (for APPROVED actions)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='parties.party')),
                ('processed_by', models.ForeignKey(help_text='System user who processed the approval', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('rejector', models.ForeignKey(blank=True, help_text='Who rejected (for REJECTED)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rejected_structures', to='parties.party')),
                ('structure', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='corporate.structure')),
            ],
            options={
                'verbose_name': 'Structure Approval',
                'verbose_name_plural': 'Structure Approvals',
                'ordering': ['-action_date'],
                'indexes': [models.Index(fields=['structure'], name='sales_struc_structu_c4ac5c_idx'), models.Index(fields=['action'], name='sales_struc_action_ae2895_idx'), models.Index(fields=['action_date'], name='sales_struc_action__c379dc_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='producthierarchy',
            index=models.Index(fields=['product', 'order'], name='sales_produ_product_c6dc71_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='producthierarchy',
            unique_together={('product', 'structure'), ('product', 'order')},
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['commercial_name'], name='sales_produ_commerc_f4c9c7_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['ativo'], name='sales_produ_ativo_c09c84_idx'),
        ),
        migrations.AddIndex(
            model_name='personalizedproduct',
            index=models.Index(fields=['base_product'], name='sales_perso_base_pr_26e697_idx'),
        ),
        migrations.AddIndex(
            model_name='personalizedproduct',
            index=models.Index(fields=['base_structure'], name='sales_perso_base_st_cc2f1e_idx'),
        ),
        migrations.AddIndex(
            model_name='personalizedproduct',
            index=models.Index(fields=['status'], name='sales_perso_status_bc066c_idx'),
        ),
        migrations.AddIndex(
            model_name='personalizedproduct',
            index=models.Index(fields=['version_number'], name='sales_perso_version_24a9ec_idx'),
        ),
        migrations.AddIndex(
            model_name='personalizedproduct',
            index=models.Index(fields=['ativo'], name='sales_perso_ativo_fa56c5_idx'),
        ),
        migrations.AddIndex(
            model_name='partner',
            index=models.Index(fields=['partnership_status'], name='sales_partn_partner_8907d2_idx'),
        ),
        migrations.AddIndex(
            model_name='partner',
            index=models.Index(fields=['created_at'], name='sales_partn_created_a7197b_idx'),
        ),
        migrations.AddIndex(
            model_name='contact',
            index=models.Index(fields=['partner'], name='sales_conta_partner_9c272f_idx'),
        ),
        migrations.AddIndex(
            model_name='contact',
            index=models.Index(fields=['email'], name='sales_conta_email_9201c9_idx'),
        ),
    ]
