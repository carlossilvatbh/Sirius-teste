# Generated by Django 4.2.7 on 2025-07-07 09:55

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='JurisdictionAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jurisdicao', models.CharField(choices=[('US', 'United States'), ('BR', 'Brazil'), ('BS', 'Bahamas'), ('WY', 'Wyoming'), ('GLOBAL', 'Global/Multiple')], help_text='Applicable jurisdiction', max_length=10)),
                ('tipo_alerta', models.CharField(choices=[('TAX', 'Tax Obligation'), ('COMPLIANCE', 'Compliance Requirement'), ('REPORTING', 'Reporting Obligation'), ('DEADLINE', 'Important Deadline'), ('REGULATORY', 'Regulatory Change'), ('RENEWAL', 'License/Registration Renewal'), ('FILING', 'Required Filing')], help_text='Type of alert', max_length=20)),
                ('titulo', models.CharField(help_text='Alert title', max_length=200)),
                ('descricao', models.TextField(help_text='Detailed alert description')),
                ('deadline_type', models.CharField(choices=[('SINGLE', 'Single Deadline'), ('RECURRING', 'Recurring Deadline')], default='SINGLE', help_text='Type of deadline (single or recurring)', max_length=20)),
                ('single_deadline', models.DateField(blank=True, help_text='Single deadline date (for non-recurring alerts)', null=True)),
                ('recurrence_pattern', models.CharField(blank=True, choices=[('MONTHLY', 'Monthly'), ('QUARTERLY', 'Quarterly'), ('SEMIANUAL', 'Semiannual'), ('ANNUAL', 'Annual'), ('BIENNIAL', 'Biennial'), ('CUSTOM', 'Custom Pattern')], help_text='Pattern for recurring deadlines', max_length=20, null=True)),
                ('next_deadline', models.DateField(blank=True, help_text='Next calculated deadline date', null=True)),
                ('last_completed', models.DateField(blank=True, help_text='Date when this alert was last completed', null=True)),
                ('template_url', models.URLField(blank=True, help_text='URL to template or form for this alert')),
                ('compliance_url', models.URLField(blank=True, help_text='URL to compliance information or portal')),
                ('advance_notice_days', models.PositiveIntegerField(default=30, help_text='Days before deadline to trigger advance notice')),
                ('auto_calculate_next', models.BooleanField(default=True, help_text='Automatically calculate next deadline after completion')),
                ('custom_recurrence_config', models.JSONField(default=dict, help_text='Custom configuration for complex recurrence patterns')),
                ('prioridade', models.IntegerField(choices=[(1, 'Priority 1'), (2, 'Priority 2'), (3, 'Priority 3'), (4, 'Priority 4'), (5, 'Priority 5')], default=3, help_text='Alert priority from 1 (low) to 5 (critical)')),
                ('ativo', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Jurisdiction Alert',
                'verbose_name_plural': 'Jurisdiction Alerts',
                'ordering': ['-prioridade', 'next_deadline', 'jurisdicao'],
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_name', models.CharField(help_text='Name of the service', max_length=200)),
                ('description', models.TextField(help_text='Detailed description of the service')),
                ('service_type', models.CharField(choices=[('LEGAL', 'Legal'), ('TAX', 'Tax'), ('COMPLIANCE', 'Compliance'), ('ADMINISTRATIVE', 'Administrative'), ('CONSULTING', 'Consulting'), ('FORMATION', 'Formation'), ('MAINTENANCE', 'Maintenance')], help_text='Type of service provided', max_length=20)),
                ('cost', models.DecimalField(blank=True, decimal_places=2, help_text='Cost of the service (optional)', max_digits=12, null=True)),
                ('estimated_duration', models.PositiveIntegerField(blank=True, help_text='Estimated duration in days', null=True)),
                ('requirements', models.JSONField(default=dict, help_text='Service requirements and prerequisites')),
                ('deliverables', models.JSONField(default=dict, help_text='Expected deliverables and outcomes')),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('DRAFT', 'Draft'), ('ARCHIVED', 'Archived')], default='DRAFT', help_text='Current status of the service', max_length=20)),
                ('ativo', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Service',
                'verbose_name_plural': 'Services',
                'ordering': ['service_name'],
            },
        ),
        migrations.CreateModel(
            name='Structure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(help_text='Structure name', max_length=100)),
                ('descricao', models.TextField(help_text='Detailed description of the structure')),
                ('jurisdicao', models.CharField(choices=[('US', 'United States'), ('BS', 'Bahamas'), ('BR', 'Brazil'), ('BZ', 'Belize'), ('VG', 'British Virgin Islands'), ('KY', 'Cayman Islands'), ('PA', 'Panama')], default='US', help_text='Primary jurisdiction', max_length=10)),
                ('estado_us', models.CharField(blank=True, choices=[('AL', 'Alabama'), ('AK', 'Alaska'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('CA', 'California'), ('CO', 'Colorado'), ('CT', 'Connecticut'), ('DE', 'Delaware'), ('FL', 'Florida'), ('GA', 'Georgia'), ('HI', 'Hawaii'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('KS', 'Kansas'), ('KY', 'Kentucky'), ('LA', 'Louisiana'), ('ME', 'Maine'), ('MD', 'Maryland'), ('MA', 'Massachusetts'), ('MI', 'Michigan'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MT', 'Montana'), ('NE', 'Nebraska'), ('NV', 'Nevada'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NY', 'New York'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OR', 'Oregon'), ('PA', 'Pennsylvania'), ('RI', 'Rhode Island'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('TN', 'Tennessee'), ('TX', 'Texas'), ('UT', 'Utah'), ('VT', 'Vermont'), ('VA', 'Virginia'), ('WA', 'Washington'), ('WV', 'West Virginia'), ('WI', 'Wisconsin'), ('WY', 'Wyoming'), ('DC', 'District of Columbia')], help_text='US State (only if jurisdiction is United States)', max_length=10, null=True)),
                ('estado_br', models.CharField(blank=True, choices=[('AC', 'Acre'), ('AL', 'Alagoas'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('BA', 'Bahia'), ('CE', 'Ceará'), ('DF', 'Distrito Federal'), ('ES', 'Espírito Santo'), ('GO', 'Goiás'), ('MA', 'Maranhão'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MG', 'Minas Gerais'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PE', 'Pernambuco'), ('PI', 'Piauí'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SE', 'Sergipe'), ('TO', 'Tocantins')], help_text='Brazilian State (only if jurisdiction is Brazil)', max_length=10, null=True)),
                ('custo_base', models.DecimalField(decimal_places=2, help_text='Base setup cost in USD', max_digits=10)),
                ('custo_manutencao', models.DecimalField(decimal_places=2, help_text='Annual maintenance cost in USD', max_digits=10)),
                ('privacidade_score', models.IntegerField(help_text='Privacy score from 0 to 100', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('compliance_score', models.IntegerField(help_text='Compliance score from 0 to 100', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('tempo_implementacao', models.IntegerField(help_text='Implementation time in business days')),
                ('documentos_necessarios', models.TextField(blank=True, help_text='Required documents for setup')),
                ('ativo', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Structure',
                'verbose_name_plural': 'Structures',
                'ordering': ['nome'],
            },
        ),
        migrations.CreateModel(
            name='TaxClassification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('TRUST', 'Trust'), ('FOREIGN_TRUST', 'Foreign Trust'), ('FUND', 'Fund'), ('US_CORP', 'US Corp'), ('OFFSHORE_CORP', 'Offshore Corp'), ('LLC_DISREGARDED_ENTITY', 'LLC Disregarded Entity'), ('LLC_PARTNERSHIP', 'LLC Partnership'), ('VIRTUAL_ASSET', 'Virtual Asset')], help_text='Tax classification name', max_length=50, unique=True)),
                ('description', models.TextField(blank=True, help_text='Description of the tax classification')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Tax Classification',
                'verbose_name_plural': 'Tax Classifications',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ValidationRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo_relacionamento', models.CharField(choices=[('REQUIRED', 'Required Combination'), ('RECOMMENDED', 'Recommended Combination'), ('INCOMPATIBLE', 'Incompatible Combination'), ('CONDITIONAL', 'Conditional Combination'), ('SYNERGISTIC', 'Synergistic Combination')], help_text='Type of relationship between structures', max_length=20)),
                ('severidade', models.CharField(choices=[('ERROR', 'Error - Blocks configuration'), ('WARNING', 'Warning - Potential issue'), ('INFO', 'Information - Suggestion')], default='INFO', help_text='Severity level of the validation rule', max_length=10)),
                ('descricao', models.TextField(help_text='Detailed description of the validation rule')),
                ('condicoes', models.JSONField(blank=True, help_text='JSON object containing specific conditions for the rule', null=True)),
                ('jurisdicao_aplicavel', models.CharField(blank=True, help_text='Specific jurisdiction where this rule applies', max_length=100)),
                ('ativo', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('estrutura_a', models.ForeignKey(help_text='First structure in the relationship', on_delete=django.db.models.deletion.CASCADE, related_name='regras_como_a', to='corporate.structure')),
                ('estrutura_b', models.ForeignKey(help_text='Second structure in the relationship', on_delete=django.db.models.deletion.CASCADE, related_name='regras_como_b', to='corporate.structure')),
            ],
            options={
                'verbose_name': 'Validation Rule',
                'verbose_name_plural': 'Validation Rules',
            },
        ),
        migrations.CreateModel(
            name='UBO',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(help_text='Full name', max_length=200)),
                ('nome_completo', models.CharField(blank=True, help_text='Nome completo do Ultimate Beneficial Owner', max_length=200)),
                ('tipo_pessoa', models.CharField(choices=[('FISICA', 'Pessoa Física'), ('JURIDICA', 'Pessoa Jurídica')], default='FISICA', help_text='Type of entity (individual or corporate)', max_length=20)),
                ('email', models.EmailField(blank=True, help_text='Email address', max_length=254)),
                ('telefone', models.CharField(blank=True, help_text='Phone number', max_length=20)),
                ('endereco', models.TextField(blank=True, help_text='Complete address')),
                ('endereco_residencia_fiscal', models.TextField(blank=True, help_text='Endereço completo de residência fiscal')),
                ('cidade', models.CharField(blank=True, help_text='City', max_length=100)),
                ('estado', models.CharField(blank=True, help_text='State/Province', max_length=100)),
                ('pais', models.CharField(blank=True, help_text='Country', max_length=100)),
                ('cep', models.CharField(blank=True, help_text='ZIP/Postal Code', max_length=20)),
                ('documento_identidade', models.CharField(blank=True, help_text='Identity document number', max_length=50)),
                ('tipo_documento', models.CharField(blank=True, help_text='Type of identity document', max_length=50)),
                ('tin', models.CharField(blank=True, help_text='Tax Identification Number - número emitido pelo país de residência fiscal', max_length=50)),
                ('nacionalidade', models.CharField(blank=True, choices=[('BR', 'Brasil'), ('US', 'Estados Unidos'), ('BS', 'Bahamas'), ('KN', 'São Cristóvão e Nevis'), ('VG', 'Ilhas Virgens Britânicas'), ('PA', 'Panamá'), ('CH', 'Suíça'), ('SG', 'Singapura'), ('HK', 'Hong Kong'), ('OTHER', 'Outro')], help_text='Nationality', max_length=10)),
                ('data_nascimento', models.DateField(blank=True, help_text='Date of birth (for individuals)', null=True)),
                ('observacoes', models.TextField(blank=True, help_text='Observações adicionais sobre o UBO')),
                ('ativo', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'UBO (Ultimate Beneficial Owner)',
                'verbose_name_plural': 'UBOs (Ultimate Beneficial Owners)',
                'ordering': ['nome'],
                'indexes': [models.Index(fields=['tipo_pessoa'], name='corporate_u_tipo_pe_c49140_idx'), models.Index(fields=['tin'], name='corporate_u_tin_27526c_idx'), models.Index(fields=['nacionalidade'], name='corporate_u_naciona_dd7631_idx'), models.Index(fields=['ativo'], name='corporate_u_ativo_e21886_idx')],
            },
        ),
        migrations.CreateModel(
            name='Successor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percentual', models.DecimalField(decimal_places=2, help_text='Percentual que o sucessor receberá (0.01 a 100.00)', max_digits=5, validators=[django.core.validators.MinValueValidator(0.01), django.core.validators.MaxValueValidator(100.0)])),
                ('data_definicao', models.DateTimeField(auto_now_add=True, help_text='Data em que a sucessão foi definida')),
                ('data_efetivacao', models.DateField(blank=True, help_text='Data em que a sucessão deve ser efetivada (opcional)', null=True)),
                ('condicoes', models.TextField(blank=True, help_text='Condições específicas para a sucessão')),
                ('ativo', models.BooleanField(default=True)),
                ('efetivado', models.BooleanField(default=False)),
                ('data_efetivacao_real', models.DateTimeField(blank=True, help_text='Data real em que a sucessão foi efetivada', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ubo_proprietario', models.ForeignKey(help_text='UBO que está definindo a sucessão', on_delete=django.db.models.deletion.CASCADE, related_name='sucessores_definidos', to='corporate.ubo')),
                ('ubo_sucessor', models.ForeignKey(help_text='UBO que receberá a sucessão', on_delete=django.db.models.deletion.CASCADE, related_name='sucessoes_recebidas', to='corporate.ubo')),
            ],
            options={
                'verbose_name': 'Successor',
                'verbose_name_plural': 'Successors',
                'ordering': ['-data_definicao'],
            },
        ),
        migrations.AddField(
            model_name='structure',
            name='tax_classifications',
            field=models.ManyToManyField(blank=True, help_text='Tax classifications for this structure', to='corporate.taxclassification'),
        ),
        migrations.CreateModel(
            name='ServiceActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_description', models.TextField(help_text='Detailed description of the activity')),
                ('activity_title', models.CharField(help_text='Short title for the activity', max_length=200)),
                ('start_date', models.DateField(help_text='Planned or actual start date')),
                ('completion_date', models.DateField(blank=True, help_text='Actual completion date (optional)', null=True)),
                ('due_date', models.DateField(blank=True, help_text='Due date for completion (optional)', null=True)),
                ('status', models.CharField(choices=[('PLANNED', 'Planned'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('ON_HOLD', 'On Hold'), ('CANCELLED', 'Cancelled')], default='PLANNED', help_text='Current status of the activity', max_length=20)),
                ('priority', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('URGENT', 'Urgent')], default='MEDIUM', help_text='Priority level of the activity', max_length=10)),
                ('responsible_person', models.CharField(help_text='Person responsible for this activity', max_length=200)),
                ('notes', models.TextField(blank=True, help_text='Additional notes and observations')),
                ('estimated_hours', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated hours for completion', max_digits=8, null=True)),
                ('actual_hours', models.DecimalField(blank=True, decimal_places=2, help_text='Actual hours spent', max_digits=8, null=True)),
                ('ativo', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('service', models.ForeignKey(help_text='Service this activity belongs to', on_delete=django.db.models.deletion.CASCADE, to='corporate.service')),
            ],
            options={
                'verbose_name': 'Service Activity',
                'verbose_name_plural': 'Service Activities',
                'ordering': ['-start_date', 'priority'],
            },
        ),
    ]
