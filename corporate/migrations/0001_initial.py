# Generated by Django 4.2.7 on 2025-07-09 12:50

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Entity name', max_length=100)),
                ('entity_type', models.CharField(choices=[('TRUST', 'Trust'), ('FOREIGN_TRUST', 'Foreign Trust'), ('FUND', 'Fund'), ('IBC', 'International Business Company'), ('LLC_DISREGARDED', 'LLC Disregarded Entity'), ('LLC_PARTNERSHIP', 'LLC Partnership'), ('LLC_AS_CORP', 'LLC as a Corp'), ('CORP', 'Corp'), ('WYOMING_FOUNDATION', 'Wyoming Statutory Foundation')], default='CORP', help_text='Type of legal entity', max_length=50)),
                ('tax_classification', models.CharField(blank=True, choices=[('TRUST', 'Trust'), ('FOREIGN_TRUST', 'Foreign Trust'), ('FUND', 'Fund'), ('US_CORP', 'US Corp'), ('OFFSHORE_CORP', 'Offshore Corp'), ('LLC_DISREGARDED_ENTITY', 'LLC Disregarded Entity'), ('LLC_PARTNERSHIP', 'LLC Partnership'), ('VIRTUAL_ASSET', 'Virtual Asset')], help_text='Tax classification for this entity', max_length=50)),
                ('implementation_templates', models.TextField(blank=True, help_text='Implementation templates (text format, not JSON)')),
                ('total_shares', models.PositiveIntegerField(blank=True, help_text='Total number of shares for this entity', null=True)),
                ('jurisdiction', models.CharField(choices=[('US', 'United States'), ('BS', 'Bahamas'), ('BR', 'Brazil'), ('BZ', 'Belize'), ('VG', 'British Virgin Islands'), ('KY', 'Cayman Islands'), ('PA', 'Panama')], default='US', help_text='Primary jurisdiction', max_length=10)),
                ('us_state', models.CharField(blank=True, choices=[('AL', 'Alabama'), ('AK', 'Alaska'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('CA', 'California'), ('CO', 'Colorado'), ('CT', 'Connecticut'), ('DE', 'Delaware'), ('FL', 'Florida'), ('GA', 'Georgia'), ('HI', 'Hawaii'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('KS', 'Kansas'), ('KY', 'Kentucky'), ('LA', 'Louisiana'), ('ME', 'Maine'), ('MD', 'Maryland'), ('MA', 'Massachusetts'), ('MI', 'Michigan'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MT', 'Montana'), ('NE', 'Nebraska'), ('NV', 'Nevada'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NY', 'New York'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OR', 'Oregon'), ('PA', 'Pennsylvania'), ('RI', 'Rhode Island'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('TN', 'Tennessee'), ('TX', 'Texas'), ('UT', 'Utah'), ('VT', 'Vermont'), ('VA', 'Virginia'), ('WA', 'Washington'), ('WV', 'West Virginia'), ('WI', 'Wisconsin'), ('WY', 'Wyoming'), ('DC', 'District of Columbia')], help_text='US State (only if jurisdiction is United States)', max_length=10, null=True)),
                ('br_state', models.CharField(blank=True, choices=[('AC', 'Acre'), ('AL', 'Alagoas'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('BA', 'Bahia'), ('CE', 'Ceará'), ('DF', 'Distrito Federal'), ('ES', 'Espírito Santo'), ('GO', 'Goiás'), ('MA', 'Maranhão'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MG', 'Minas Gerais'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PE', 'Pernambuco'), ('PI', 'Piauí'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SE', 'Sergipe'), ('TO', 'Tocantins')], help_text='Brazilian State (only if jurisdiction is Brazil)', max_length=10, null=True)),
                ('implementation_time', models.IntegerField(default=30, help_text='Implementation time in days', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(365)])),
                ('complexity', models.IntegerField(choices=[(1, 'Level 1'), (2, 'Level 2'), (3, 'Level 3'), (4, 'Level 4'), (5, 'Level 5')], default=3, help_text='Complexity level from 1 (simple) to 5 (very complex)')),
                ('tax_impact_usa', models.TextField(default='To be determined', help_text='Detailed tax implications in the United States')),
                ('tax_impact_brazil', models.TextField(default='To be determined', help_text='Detailed tax implications in Brazil')),
                ('tax_impact_others', models.TextField(blank=True, help_text='Tax implications in other jurisdictions')),
                ('confidentiality_level', models.IntegerField(choices=[(1, 'Level 1'), (2, 'Level 2'), (3, 'Level 3'), (4, 'Level 4'), (5, 'Level 5')], default=3, help_text='Confidentiality level from 1 (low) to 5 (very high)')),
                ('asset_protection', models.IntegerField(choices=[(1, 'Level 1'), (2, 'Level 2'), (3, 'Level 3'), (4, 'Level 4'), (5, 'Level 5')], default=3, help_text='Asset protection level from 1 (low) to 5 (very high)')),
                ('privacy_impact', models.TextField(default='Standard privacy protections apply', help_text='Detailed privacy implications and protections')),
                ('privacy_score', models.IntegerField(choices=[(0, 'Level 0'), (1, 'Level 1'), (2, 'Level 2'), (3, 'Level 3')], default=1, help_text='Privacy score from 0 (lowest) to 3 (highest)')),
                ('banking_relation_score', models.IntegerField(choices=[(1, 'Level 1'), (2, 'Level 2'), (3, 'Level 3')], default=2, help_text='Banking relationship difficulty from 1 (easy) to 3 (difficult)')),
                ('compliance_score', models.IntegerField(blank=True, help_text='Compliance score from 0 to 100', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('banking_facility', models.IntegerField(choices=[(1, 'Level 1'), (2, 'Level 2'), (3, 'Level 3'), (4, 'Level 4'), (5, 'Level 5')], default=3, help_text='Banking facility level from 1 (difficult) to 5 (very easy)')),
                ('required_documentation', models.TextField(default='Standard documentation required', help_text='Required documentation for setup')),
                ('documents_url', models.URLField(blank=True, help_text='URL for entity documents and templates')),
                ('required_forms_usa', models.TextField(blank=True, help_text='Required US forms and reporting obligations')),
                ('required_forms_brazil', models.TextField(blank=True, help_text='Required Brazilian forms and reporting obligations')),
                ('active', models.BooleanField(default=True, help_text='Whether entity is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Entity',
                'verbose_name_plural': 'Entities',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='EntityOwnership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('corporate_name', models.CharField(blank=True, help_text='Corporate name when entity is used in structure', max_length=200)),
                ('hash_number', models.CharField(blank=True, help_text='Hash number when entity is used in structure', max_length=50)),
                ('owned_shares', models.PositiveIntegerField(blank=True, help_text='Number of shares owned by this owner', null=True)),
                ('ownership_percentage', models.DecimalField(blank=True, decimal_places=2, help_text='Ownership percentage', max_digits=5, null=True)),
                ('share_value_usd', models.DecimalField(blank=True, decimal_places=2, help_text='Value per share in USD', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('share_value_eur', models.DecimalField(blank=True, decimal_places=2, help_text='Value per share in EUR', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('total_value_usd', models.DecimalField(blank=True, decimal_places=2, help_text='Total value of owned shares in USD', max_digits=20, null=True)),
                ('total_value_eur', models.DecimalField(blank=True, decimal_places=2, help_text='Total value of owned shares in EUR', max_digits=20, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Entity Ownership',
                'verbose_name_plural': 'Entity Ownerships',
            },
        ),
        migrations.CreateModel(
            name='ValidationRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relationship_type', models.CharField(choices=[('REQUIRED', 'Required Combination'), ('RECOMMENDED', 'Recommended Combination'), ('INCOMPATIBLE', 'Incompatible Combination'), ('CONDITIONAL', 'Conditional Combination'), ('SYNERGISTIC', 'Synergistic Combination')], max_length=20)),
                ('severity', models.CharField(choices=[('ERROR', 'Error - Blocks configuration'), ('WARNING', 'Warning - Potential issue'), ('INFO', 'Information - Suggestion')], max_length=10)),
                ('description', models.TextField()),
                ('tax_impacts', models.TextField(help_text='Detailed tax implications of this entity combination')),
                ('jurisdiction', models.CharField(blank=True, max_length=100)),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent_entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parent_validation_rules', to='corporate.entity')),
                ('related_entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_validation_rules', to='corporate.entity')),
            ],
            options={
                'verbose_name': 'Validation Rule',
                'verbose_name_plural': 'Validation Rules',
            },
        ),
        migrations.CreateModel(
            name='UBO',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(help_text='Full name', max_length=200)),
                ('nome_completo', models.CharField(blank=True, help_text='Nome completo do Ultimate Beneficial Owner', max_length=200)),
                ('tipo_pessoa', models.CharField(choices=[('FISICA', 'Pessoa Física'), ('JURIDICA', 'Pessoa Jurídica')], default='FISICA', help_text='Type of entity (individual or corporate)', max_length=20)),
                ('email', models.EmailField(blank=True, help_text='Email address', max_length=254)),
                ('telefone', models.CharField(blank=True, help_text='Phone number', max_length=20)),
                ('endereco', models.TextField(blank=True, help_text='Complete address')),
                ('endereco_residencia_fiscal', models.TextField(blank=True, help_text='Endereço completo de residência fiscal')),
                ('cidade', models.CharField(blank=True, help_text='City', max_length=100)),
                ('estado', models.CharField(blank=True, help_text='State/Province', max_length=100)),
                ('pais', models.CharField(blank=True, help_text='Country', max_length=100)),
                ('cep', models.CharField(blank=True, help_text='ZIP/Postal Code', max_length=20)),
                ('documento_identidade', models.CharField(blank=True, help_text='Identity document number', max_length=50)),
                ('tipo_documento', models.CharField(blank=True, help_text='Type of identity document', max_length=50)),
                ('tin', models.CharField(blank=True, help_text='Tax Identification Number - número emitido pelo país de residência fiscal', max_length=50)),
                ('nacionalidade', models.CharField(blank=True, choices=[('BR', 'Brasil'), ('US', 'Estados Unidos'), ('BS', 'Bahamas'), ('KN', 'São Cristóvão e Nevis'), ('VG', 'Ilhas Virgens Britânicas'), ('PA', 'Panamá'), ('CH', 'Suíça'), ('SG', 'Singapura'), ('HK', 'Hong Kong'), ('OTHER', 'Outro')], help_text='Nationality', max_length=10)),
                ('data_nascimento', models.DateField(blank=True, help_text='Date of birth (for individuals)', null=True)),
                ('observacoes', models.TextField(blank=True, help_text='Observações adicionais sobre o UBO')),
                ('ativo', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'UBO (Ultimate Beneficial Owner)',
                'verbose_name_plural': 'UBOs (Ultimate Beneficial Owners)',
                'ordering': ['nome'],
                'indexes': [models.Index(fields=['tipo_pessoa'], name='corporate_u_tipo_pe_c49140_idx'), models.Index(fields=['tin'], name='corporate_u_tin_27526c_idx'), models.Index(fields=['nacionalidade'], name='corporate_u_naciona_dd7631_idx'), models.Index(fields=['ativo'], name='corporate_u_ativo_e21886_idx')],
            },
        ),
        migrations.CreateModel(
            name='Successor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percentual', models.DecimalField(decimal_places=2, help_text='Percentual que o sucessor receberá (0.01 a 100.00)', max_digits=5, validators=[django.core.validators.MinValueValidator(0.01), django.core.validators.MaxValueValidator(100.0)])),
                ('data_definicao', models.DateTimeField(auto_now_add=True, help_text='Data em que a sucessão foi definida')),
                ('data_efetivacao', models.DateField(blank=True, help_text='Data em que a sucessão deve ser efetivada (opcional)', null=True)),
                ('condicoes', models.TextField(blank=True, help_text='Condições específicas para a sucessão')),
                ('ativo', models.BooleanField(default=True)),
                ('efetivado', models.BooleanField(default=False)),
                ('data_efetivacao_real', models.DateTimeField(blank=True, help_text='Data real em que a sucessão foi efetivada', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ubo_proprietario', models.ForeignKey(help_text='UBO que está definindo a sucessão', on_delete=django.db.models.deletion.CASCADE, related_name='sucessores_definidos', to='corporate.ubo')),
                ('ubo_sucessor', models.ForeignKey(help_text='UBO que receberá a sucessão', on_delete=django.db.models.deletion.CASCADE, related_name='sucessoes_recebidas', to='corporate.ubo')),
            ],
            options={
                'verbose_name': 'Successor',
                'verbose_name_plural': 'Successors',
                'ordering': ['-data_definicao'],
            },
        ),
        migrations.CreateModel(
            name='StructureOwnership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percentage', models.DecimalField(decimal_places=2, help_text='Percentual de propriedade (0.01 a 100.00)', max_digits=5, validators=[django.core.validators.MinValueValidator(0.01), django.core.validators.MaxValueValidator(100.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('child', models.ForeignKey(help_text='Entity possuída (child)', on_delete=django.db.models.deletion.CASCADE, related_name='ownership_by_legacy', to='corporate.entity')),
                ('parent', models.ForeignKey(help_text='Entity proprietária (parent)', on_delete=django.db.models.deletion.CASCADE, related_name='owned_entities_legacy', to='corporate.entity')),
            ],
            options={
                'verbose_name': 'Structure Ownership (Legacy)',
                'verbose_name_plural': 'Structure Ownerships (Legacy)',
                'ordering': ['-percentage'],
            },
        ),
        migrations.CreateModel(
            name='Structure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Structure name', max_length=200)),
                ('description', models.TextField(help_text='Structure description')),
                ('status', models.CharField(choices=[('DRAFTING', 'Drafting'), ('SENT_FOR_APPROVAL', 'Sent for Approval'), ('APPROVED', 'Approved')], default='DRAFTING', max_length=20)),
                ('tax_impacts', models.TextField(blank=True, help_text='Aggregated tax impacts from validation rules')),
                ('severity_levels', models.TextField(blank=True, help_text='Aggregated severity levels from validation rules')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Structure',
                'verbose_name_plural': 'Structures',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['status'], name='corporate_s_status_f44f03_idx'), models.Index(fields=['created_at'], name='corporate_s_created_484bcf_idx')],
            },
        ),
        migrations.CreateModel(
            name='MasterEntity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corporate.entity')),
                ('structure', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corporate.structure')),
            ],
            options={
                'verbose_name': 'Master Entity',
                'verbose_name_plural': 'Master Entities',
            },
        ),
        migrations.CreateModel(
            name='JurisdictionAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jurisdicao', models.CharField(choices=[('US', 'United States'), ('BR', 'Brazil'), ('BS', 'Bahamas'), ('WY', 'Wyoming'), ('GLOBAL', 'Global/Multiple')], help_text='Applicable jurisdiction', max_length=10)),
                ('tipo_alerta', models.CharField(choices=[('TAX', 'Tax Obligation'), ('COMPLIANCE', 'Compliance Requirement'), ('REPORTING', 'Reporting Obligation'), ('DEADLINE', 'Important Deadline'), ('REGULATORY', 'Regulatory Change'), ('RENEWAL', 'License/Registration Renewal'), ('FILING', 'Required Filing')], help_text='Type of alert', max_length=20)),
                ('titulo', models.CharField(help_text='Alert title', max_length=200)),
                ('descricao', models.TextField(help_text='Detailed alert description')),
                ('deadline_type', models.CharField(choices=[('SINGLE', 'Single Deadline'), ('RECURRING', 'Recurring Deadline')], default='SINGLE', help_text='Type of deadline (single or recurring)', max_length=20)),
                ('single_deadline', models.DateField(blank=True, help_text='Single deadline date (for non-recurring alerts)', null=True)),
                ('recurrence_pattern', models.CharField(blank=True, choices=[('MONTHLY', 'Monthly'), ('QUARTERLY', 'Quarterly'), ('SEMIANUAL', 'Semiannual'), ('ANNUAL', 'Annual'), ('BIENNIAL', 'Biennial'), ('CUSTOM', 'Custom Pattern')], help_text='Pattern for recurring deadlines', max_length=20, null=True)),
                ('next_deadline', models.DateField(blank=True, help_text='Next calculated deadline date', null=True)),
                ('last_completed', models.DateField(blank=True, help_text='Date when this alert was last completed', null=True)),
                ('template_url', models.URLField(blank=True, help_text='URL to template or form for this alert')),
                ('compliance_url', models.URLField(blank=True, help_text='URL to compliance information or portal')),
                ('advance_notice_days', models.PositiveIntegerField(default=30, help_text='Days before deadline to trigger advance notice')),
                ('auto_calculate_next', models.BooleanField(default=True, help_text='Automatically calculate next deadline after completion')),
                ('custom_recurrence_config', models.JSONField(blank=True, default=dict, help_text='Custom configuration for complex recurrence patterns')),
                ('prioridade', models.IntegerField(choices=[(1, 'Priority 1'), (2, 'Priority 2'), (3, 'Priority 3'), (4, 'Priority 4'), (5, 'Priority 5')], default=3, help_text='Alert priority from 1 (low) to 5 (critical)')),
                ('ativo', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('estruturas_aplicaveis', models.ManyToManyField(blank=True, help_text='Entities to which this alert applies', to='corporate.entity')),
            ],
            options={
                'verbose_name': 'Jurisdiction Alert',
                'verbose_name_plural': 'Jurisdiction Alerts',
                'ordering': ['-prioridade', 'next_deadline', 'jurisdicao'],
            },
        ),
    ]
