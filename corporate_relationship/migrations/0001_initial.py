# Generated by Django 4.2.7 on 2025-07-09 12:50

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import djmoney.models.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('parties', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('corporate', '0001_initial'),
        ('sales', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='RelationshipStructure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('ARCHIVED', 'Archived')], default='ACTIVE', help_text='Status do relacionamento', max_length=15)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Data de criação do relacionamento')),
                ('client', models.ForeignKey(help_text='Partner proprietário da estrutura', on_delete=django.db.models.deletion.CASCADE, to='sales.partner')),
                ('structure', models.ForeignKey(help_text='Estrutura legal relacionada', on_delete=django.db.models.deletion.CASCADE, to='corporate.structure')),
            ],
            options={
                'verbose_name': 'Relationship Structure',
                'verbose_name_plural': 'Relationship Structures',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nome do serviço', max_length=120)),
                ('description', models.TextField(blank=True, help_text='Descrição detalhada do serviço')),
                ('service_price_currency', djmoney.models.fields.CurrencyField(choices=[('BRL', 'Brazilian Real'), ('EUR', 'Euro'), ('USD', 'US Dollar')], default='USD', editable=False, max_length=3)),
                ('service_price', djmoney.models.fields.MoneyField(decimal_places=2, help_text='Preço do serviço', max_digits=12)),
                ('regulator_fee_currency', djmoney.models.fields.CurrencyField(choices=[('BRL', 'Brazilian Real'), ('EUR', 'Euro'), ('USD', 'US Dollar')], default='USD', editable=False, max_length=3)),
                ('regulator_fee', djmoney.models.fields.MoneyField(decimal_places=2, help_text='Taxa regulatória/governamental', max_digits=12)),
                ('counterparty_name', models.CharField(help_text='Nome do órgão/entidade receptora', max_length=120)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('executor', models.ForeignKey(help_text='Usuário responsável pela execução', on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('informed', models.ManyToManyField(blank=True, help_text='Contatos do cliente a serem notificados', to='sales.contact')),
                ('relationship_structure', models.ForeignKey(blank=True, help_text='Estrutura relacionada (opcional)', null=True, on_delete=django.db.models.deletion.CASCADE, to='corporate_relationship.relationshipstructure')),
            ],
            options={
                'verbose_name': 'Service',
                'verbose_name_plural': 'Services',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='WebhookLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(help_text='Tipo do evento (ex: personalized_product_approved)', max_length=50)),
                ('payload', models.JSONField(help_text='Payload enviado no webhook')),
                ('url', models.URLField(help_text='URL de destino do webhook')),
                ('status', models.CharField(choices=[('SUCCESS', 'Success'), ('FAILED', 'Failed'), ('PENDING', 'Pending')], default='PENDING', help_text='Status da tentativa', max_length=10)),
                ('response_status_code', models.PositiveIntegerField(blank=True, help_text='Código de status HTTP da resposta', null=True)),
                ('response_body', models.TextField(blank=True, help_text='Corpo da resposta HTTP')),
                ('error_message', models.TextField(blank=True, help_text='Mensagem de erro se houver falha')),
                ('attempt_count', models.PositiveIntegerField(default=1, help_text='Número de tentativas realizadas')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Data da primeira tentativa')),
                ('last_attempt_at', models.DateTimeField(auto_now=True, help_text='Data da última tentativa')),
            ],
            options={
                'verbose_name': 'Webhook Log',
                'verbose_name_plural': 'Webhook Logs',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['event_type'], name='corporate_r_event_t_8b9bfc_idx'), models.Index(fields=['status'], name='corporate_r_status_45909b_idx'), models.Index(fields=['created_at'], name='corporate_r_created_a8f345_idx')],
            },
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('approval_date', models.DateTimeField(help_text='When the structure was approved')),
                ('file_number', models.CharField(help_text='Unique file identifier', max_length=50, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(help_text='Party who approved the structure', null=True, on_delete=django.db.models.deletion.SET_NULL, to='parties.party')),
                ('structure', models.OneToOneField(help_text='Reference to approved structure', on_delete=django.db.models.deletion.CASCADE, to='corporate.structure')),
            ],
            options={
                'verbose_name': 'File',
                'verbose_name_plural': 'Files',
                'ordering': ['-approval_date'],
            },
        ),
        migrations.CreateModel(
            name='ServiceActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_title', models.CharField(help_text='Título da atividade', max_length=200)),
                ('activity_description', models.TextField(blank=True, help_text='Descrição detalhada da atividade')),
                ('start_date', models.DateField(help_text='Data de início planejada')),
                ('due_date', models.DateField(blank=True, help_text='Data de vencimento', null=True)),
                ('completed_date', models.DateField(blank=True, help_text='Data de conclusão real', null=True)),
                ('status', models.CharField(choices=[('PLANNED', 'Planned'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled')], default='PLANNED', help_text='Status da atividade', max_length=12)),
                ('priority', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('URGENT', 'Urgent')], default='MEDIUM', help_text='Prioridade da atividade', max_length=10)),
                ('responsible_person', models.CharField(blank=True, help_text='Pessoa responsável pela atividade', max_length=200)),
                ('notes', models.TextField(blank=True, help_text='Notas e comentários')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('service', models.ForeignKey(help_text='Serviço ao qual esta atividade pertence', on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='corporate_relationship.service')),
            ],
            options={
                'verbose_name': 'Service Activity',
                'verbose_name_plural': 'Service Activities',
                'ordering': ['due_date', 'priority', 'start_date'],
                'indexes': [models.Index(fields=['service'], name='corporate_r_service_b824c3_idx'), models.Index(fields=['status'], name='corporate_r_status_15a7a3_idx'), models.Index(fields=['due_date'], name='corporate_r_due_dat_86a516_idx'), models.Index(fields=['priority'], name='corporate_r_priorit_19fb05_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='service',
            index=models.Index(fields=['name'], name='corporate_r_name_925eed_idx'),
        ),
        migrations.AddIndex(
            model_name='service',
            index=models.Index(fields=['executor'], name='corporate_r_executo_153d65_idx'),
        ),
        migrations.AddIndex(
            model_name='service',
            index=models.Index(fields=['created_at'], name='corporate_r_created_58ca66_idx'),
        ),
        migrations.AddIndex(
            model_name='relationshipstructure',
            index=models.Index(fields=['structure'], name='corporate_r_structu_05342b_idx'),
        ),
        migrations.AddIndex(
            model_name='relationshipstructure',
            index=models.Index(fields=['client'], name='corporate_r_client__ea079f_idx'),
        ),
        migrations.AddIndex(
            model_name='relationshipstructure',
            index=models.Index(fields=['status'], name='corporate_r_status_b93854_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='relationshipstructure',
            unique_together={('structure', 'client')},
        ),
        migrations.AddIndex(
            model_name='file',
            index=models.Index(fields=['file_number'], name='corporate_r_file_nu_2a6cda_idx'),
        ),
        migrations.AddIndex(
            model_name='file',
            index=models.Index(fields=['approval_date'], name='corporate_r_approva_c0e9ac_idx'),
        ),
    ]
