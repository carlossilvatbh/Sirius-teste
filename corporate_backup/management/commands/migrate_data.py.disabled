from django.core.management.base import BaseCommand
from django.db import transaction
# from estruturas_app.models import Estrutura, UBO as OldUBO, Product as OldProduct, PersonalizedProduct as OldPersonalizedProduct
from corporate.models import Structure, UBO
from sales.models import Product, PersonalizedProduct


class Command(BaseCommand):
    help = 'Migra dados do modelo antigo para os novos apps corporate e sales'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('Iniciando migração de dados...'))
        
        try:
            with transaction.atomic():
                # 1. Criar as Tax Classifications
                self.create_tax_classifications()
                
                # 2. Migrar Estruturas para Structures
                self.migrate_structures()
                
                # 3. Migrar UBOs
                self.migrate_ubos()
                
                # 4. Migrar Products
                self.migrate_products()
                
                # 5. Migrar PersonalizedProducts
                self.migrate_personalized_products()
                
                self.stdout.write(self.style.SUCCESS('Migração concluída com sucesso!'))
                
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'Erro durante a migração: {str(e)}'))
            raise

    def create_tax_classifications(self):
        """Cria as classificações fiscais"""
        self.stdout.write('Criando Tax Classifications...')
        
        classifications = [
            ('TRUST', 'Trust'),
            ('FOREIGN_TRUST', 'Foreign Trust'),
            ('FUND', 'Fund'),
            ('US_CORP', 'US Corp'),
            ('OFFSHORE_CORP', 'Offshore Corp'),
            ('LLC_DISREGARDED_ENTITY', 'LLC Disregarded Entity'),
            ('LLC_PARTNERSHIP', 'LLC Partnership'),
            ('VIRTUAL_ASSET', 'Virtual Asset'),
        ]
        
        for code, name in classifications:
            tax_class, created = TaxClassification.objects.get_or_create(
                name=code,
                defaults={'description': f'Tax classification for {name}'}
            )
            if created:
                self.stdout.write(f'  Created: {name}')

    def migrate_structures(self):
        """Migra Estruturas para Structures"""
        self.stdout.write('Migrando Estruturas para Structures...')
        
        old_structures = Estrutura.objects.all()
        
        for old_struct in old_structures:
            # Criar nova Structure
            new_struct, created = Structure.objects.get_or_create(
                nome=old_struct.nome,
                defaults={
                    'descricao': old_struct.descricao,
                    'jurisdicao': old_struct.jurisdicao,
                    'estado_us': old_struct.estado_us,
                    'estado_br': old_struct.estado_br,
                    'custo_base': old_struct.custo_base,
                    'custo_manutencao': old_struct.custo_manutencao,
                    'privacidade_score': old_struct.privacidade_score,
                    'compliance_score': old_struct.compliance_score,
                    'tempo_implementacao': old_struct.tempo_implementacao,
                    'documentos_necessarios': old_struct.documentos_necessarios,
                    'ativo': old_struct.ativo,
                    'created_at': old_struct.created_at,
                    'updated_at': old_struct.updated_at,
                }
            )
            
            if created:
                # Mapear tipo antigo para tax classifications
                tax_mapping = {
                    'TRUST': 'TRUST',
                    'FOREIGN_TRUST': 'FOREIGN_TRUST',
                    'FUND': 'FUND',
                    'IBC': 'OFFSHORE_CORP',
                    'LLC_DISREGARDED': 'LLC_DISREGARDED_ENTITY',
                    'LLC_PARTNERSHIP': 'LLC_PARTNERSHIP',
                    'LLC_AS_CORP': 'US_CORP',
                    'CORP': 'US_CORP',
                    'WYOMING_FOUNDATION': 'TRUST',
                }
                
                if hasattr(old_struct, 'tipo') and old_struct.tipo in tax_mapping:
                    tax_class = TaxClassification.objects.get(name=tax_mapping[old_struct.tipo])
                    new_struct.tax_classifications.add(tax_class)
                
                self.stdout.write(f'  Migrated: {old_struct.nome}')

    def migrate_ubos(self):
        """Migra UBOs"""
        self.stdout.write('Migrando UBOs...')
        
        try:
            old_ubos = OldUBO.objects.all()
            
            for old_ubo in old_ubos:
                new_ubo, created = UBO.objects.get_or_create(
                    nome=old_ubo.nome,
                    defaults={
                        'tipo_pessoa': old_ubo.tipo_pessoa,
                        'email': old_ubo.email,
                        'telefone': old_ubo.telefone,
                        'endereco': old_ubo.endereco,
                        'cidade': old_ubo.cidade,
                        'estado': old_ubo.estado,
                        'pais': old_ubo.pais,
                        'cep': old_ubo.cep,
                        'documento_identidade': old_ubo.documento_identidade,
                        'tipo_documento': old_ubo.tipo_documento,
                        'nacionalidade': old_ubo.nacionalidade,
                        'data_nascimento': old_ubo.data_nascimento,
                        'ativo': old_ubo.ativo,
                        'created_at': old_ubo.created_at,
                        'updated_at': old_ubo.updated_at,
                    }
                )
                
                if created:
                    self.stdout.write(f'  Migrated: {old_ubo.nome}')
                    
        except Exception as e:
            self.stdout.write(f'  UBO model não encontrado no modelo antigo: {str(e)}')

    def migrate_products(self):
        """Migra Products"""
        self.stdout.write('Migrando Products...')
        
        try:
            old_products = OldProduct.objects.all()
            
            for old_product in old_products:
                new_product, created = Product.objects.get_or_create(
                    nome=old_product.nome,
                    defaults={
                        'complexidade_template': old_product.complexidade_template,
                        'descricao': old_product.descricao,
                        'commercial_name': old_product.commercial_name,
                        'master_agreement_url': old_product.master_agreement_url,
                        'custo_automatico': old_product.custo_automatico,
                        'custo_manual': old_product.custo_manual,
                        'tempo_total_implementacao': old_product.tempo_total_implementacao,
                        'uso_count': old_product.uso_count,
                        'publico_alvo': old_product.publico_alvo,
                        'casos_uso': old_product.casos_uso,
                        'ativo': old_product.ativo,
                        'created_at': old_product.created_at,
                        'updated_at': old_product.updated_at,
                    }
                )
                
                if created:
                    self.stdout.write(f'  Migrated: {old_product.nome}')
                    
        except Exception as e:
            self.stdout.write(f'  Product model não encontrado no modelo antigo: {str(e)}')

    def migrate_personalized_products(self):
        """Migra PersonalizedProducts"""
        self.stdout.write('Migrando PersonalizedProducts...')
        
        try:
            old_personalized = OldPersonalizedProduct.objects.all()
            
            for old_pp in old_personalized:
                new_pp, created = PersonalizedProduct.objects.get_or_create(
                    nome=old_pp.nome,
                    defaults={
                        'descricao': old_pp.descricao,
                        'status': old_pp.status,
                        'version_number': old_pp.version_number,
                        'configuracao_personalizada': old_pp.configuracao_personalizada,
                        'custo_personalizado': old_pp.custo_personalizado,
                        'observacoes': old_pp.observacoes,
                        'ativo': old_pp.ativo,
                        'created_at': old_pp.created_at,
                        'updated_at': old_pp.updated_at,
                    }
                )
                
                if created:
                    # Associar base_product ou base_structure
                    if hasattr(old_pp, 'base_product') and old_pp.base_product:
                        try:
                            new_base_product = Product.objects.get(nome=old_pp.base_product.nome)
                            new_pp.base_product = new_base_product
                            new_pp.save()
                        except Product.DoesNotExist:
                            pass
                            
                    if hasattr(old_pp, 'base_structure') and old_pp.base_structure:
                        try:
                            new_base_structure = Structure.objects.get(nome=old_pp.base_structure.nome)
                            new_pp.base_structure = new_base_structure
                            new_pp.save()
                        except Structure.DoesNotExist:
                            pass
                    
                    self.stdout.write(f'  Migrated: {old_pp.nome}')
                    
        except Exception as e:
            self.stdout.write(f'  PersonalizedProduct model não encontrado no modelo antigo: {str(e)}')
